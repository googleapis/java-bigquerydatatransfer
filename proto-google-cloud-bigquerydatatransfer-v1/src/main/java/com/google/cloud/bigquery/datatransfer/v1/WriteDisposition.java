/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/datatransfer/v1/datasource.proto

package com.google.cloud.bigquery.datatransfer.v1;

/**
 *
 *
 * <pre>
 * Options for writing to the table.
 * The WRITE_EMPTY option is intentionally excluded from the enum and is not
 * supported by the data transfer service.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.bigquery.datatransfer.v1.WriteDisposition}
 */
public enum WriteDisposition implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * The default writeDispostion
   * </pre>
   *
   * <code>WRITE_DISPOSITION_UNSPECIFIED = 0;</code>
   */
  WRITE_DISPOSITION_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * overwrites the table data.
   * </pre>
   *
   * <code>WRITE_TRUNCATE = 1;</code>
   */
  WRITE_TRUNCATE(1),
  /**
   *
   *
   * <pre>
   * the data is appended to the table.
   * Note duplication might happen if this mode is used.
   * </pre>
   *
   * <code>WRITE_APPEND = 2;</code>
   */
  WRITE_APPEND(2),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * The default writeDispostion
   * </pre>
   *
   * <code>WRITE_DISPOSITION_UNSPECIFIED = 0;</code>
   */
  public static final int WRITE_DISPOSITION_UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * overwrites the table data.
   * </pre>
   *
   * <code>WRITE_TRUNCATE = 1;</code>
   */
  public static final int WRITE_TRUNCATE_VALUE = 1;
  /**
   *
   *
   * <pre>
   * the data is appended to the table.
   * Note duplication might happen if this mode is used.
   * </pre>
   *
   * <code>WRITE_APPEND = 2;</code>
   */
  public static final int WRITE_APPEND_VALUE = 2;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /** @deprecated Use {@link #forNumber(int)} instead. */
  @java.lang.Deprecated
  public static WriteDisposition valueOf(int value) {
    return forNumber(value);
  }

  public static WriteDisposition forNumber(int value) {
    switch (value) {
      case 0:
        return WRITE_DISPOSITION_UNSPECIFIED;
      case 1:
        return WRITE_TRUNCATE;
      case 2:
        return WRITE_APPEND;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WriteDisposition> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<WriteDisposition> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<WriteDisposition>() {
        public WriteDisposition findValueByNumber(int number) {
          return WriteDisposition.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.cloud.bigquery.datatransfer.v1.DataSourceProto.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final WriteDisposition[] VALUES = values();

  public static WriteDisposition valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WriteDisposition(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.bigquery.datatransfer.v1.WriteDisposition)
}
